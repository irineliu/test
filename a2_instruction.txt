In this assignment, you have to write a program that manages a car inventory. A car inventory is a list containing cars. A car is a list containing (in this EXACT order): a model number (str), a year (int), a colour (str), a make (str), a model (str), a body type (str), and a quantity (int). Since a car is a list, we can say that the complete inventory of cars is a list of lists.The main portion of your program (after all functions definitions) must do the following:1. Create an empty car inventory to start with2. Read a menu selection from the user (see example posted on Blackboard)3. Call the appropriate function based on the menu selection4. Read another menu selection and repeat steps 3 and 4 until the user selects Quit5. When the user selects Quit, print “Goodbye!”
Your program must define and use the following functions:
menu(inventory_size):(int) -> strThis function takes one argument: the size of the car inventory as an int. The function returns a str representing the menu selection from the user. It displays the Car Inventory Menu and reads the menu selection from the user, which is returned as a str. Note that the function only displays menu options 1 and Quit if the car inventory is empty (i.e., when the car inventory is empty, the only options to the user are to add a car or quit). When the car inventory is not empty, the function displays the full menu.
find_index(inventory, model_number, year, colour):(list, str, int, str) -> intThis function takes four arguments: a list representing the car inventory, a str representing the model number, an int representing the year, and a str representing the colour. The function searches the car inventory and returns the index of the car with a matching model number, year, and colour, as an int. The function returns -1 if the car is not found.
add_car(inventory):(list) -> NoneThis function takes one argument: a list representing the car inventory. The function adds a car to the inventory if and only if a car with the same model number, year, and colour is not already part of the inventory. If a car with the same model number, year, and colour is already part of the inventory, the function asks the user the quantity to be added and increases the current quantity accordingly. Use the find_index function to determine if a car with the same model number, year, and colour is already part of the inventory or not.
remove_car(inventory):(list) -> NoneThis function takes one argument: a list representing the car inventory. The function removes a car from the inventory if and only if the car quantity is one (1). If the car quantity is greater than one, it decreases the quantity of the car by one. Use the find_index function to determine if a car with a given model number, year, and colour is already part of the inventory or not. If the car cannot be found in the inventory, the function prints the message: “Car not found! Cannot remove car!”.
find_car(inventory):(list) -> NoneThis function takes one argument: a list representing the car inventory. The function first asks the user if they want to find a car by Model Number, by Make, by Model, or by Body Type (if the user enters a wrong selection, ask the question again). If the car is part of the inventory, the function prints the car data, tab-delimited on the same line. If the car is not part of the inventory, the function prints the message: “No cars found!”. Hint: This function does NOT use the find_index function.
show_inventory(inventory):(list) -> NoneThis function takes one argument: a list representing the car inventory. The function prints all car data, tab-delimited, one car per line.